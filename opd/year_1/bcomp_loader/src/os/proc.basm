; ----------------------------- PROCESS MANAGEMENT SYSTEM -----------------------------

; begin globals
_SYS_PROC__PROCESSES_MAX: WORD 0x3
_SYS_PROC__RUNNING_PROCESS_ID: WORD 0x0
_SYS_PROC__CUR_PROCESSES_COUNT: WORD 0x0
; end globals


; func PROC_EXIT: () kill current process
; begin func
EXPORT PROC_EXIT:
  LD _SYS_PROC__RUNNING_PROCESS_ID
  CALL PROC_KILL
  RET
; end func PROC_EXIT



; func PROC__INIT_MANAGER: (sp_origin) prepares structures to hold processes
;
; params: AC: sp_origin to set for all processes
; stack:
; &: tcb_ptr
; &: stack_data_ptr
; &: sp_origin
; &: cur_id
; &: ret_addr
; begin func
EXPORT PROC__INIT_MANAGER:
; begin prologue
  APUSH
; end prologue

  ST &sp_origin

  LD $_PROC__TCB_DESCR_BEGIN
  ST &tcb_ptr

  LD $_SYS_PROC__PROCESSES_MAX
  ST &cur_id
  
  LD $_PROC__TCB_STACK_BEGIN
  ST &stack_data_ptr

  PIM__LOOP:
    LD #0xFF ; free thread
    ST (&tcb_ptr)

    LD &tcb_ptr
    ADD #4
    ST &tcb_ptr

    LD &sp_origin
    ST (&tcb_ptr)

    LD &tcb_ptr
    ADD #2
    ST &tcb_ptr

    LD &stack_data_ptr
    ST (&tcb_ptr)+

    LD &stack_data_ptr
    ADD $_PROC__TCB_STACK_SIZE
    ST &stack_data_ptr

    LOOP &cur_id
    JUMP PIM__LOOP

PIM__END:
; begin epilogue
  APOP
  RET
; end epilogue
; end func PROC__INIT_MANAGER



; func PROC_INIT: (ip) create process TCB with entrypoint address ip
; 
; params: AC: ip
; return: process id or 0xFFFF if could not be created
; stack:
; &: tcb_ptr
; &: ip
; &: proc_id
; &: ret_addr
; begin globals
PCRT__BASE_PS: WORD 0x1A0 ; P | W | EI
; end globals
; begin func
EXPORT PROC_INIT:
; begin prologue
  APUSH
; end prologue
  ST &ip

  ; check count
  LD $_SYS_PROC__CUR_PROCESSES_COUNT
  CMP $_SYS_PROC__PROCESSES_MAX
  BHIS PCRT__INVALID

  ; search for free id
  LD $_SYS_PROC__PROCESSES_MAX
  PUSH 
  LD #0xFF
  FCALL ($PROC_GET_NEXT_WITH_STATUS_PTR)

  BMI PCRT__INVALID
  ST &proc_id+1
  
  FCALL ($PROC_GET_TCB_PTR_PTR)
  ST &tcb_ptr+1
  
  POP

  CLA 
  ST (&tcb_ptr)+ ; state
  ST (&tcb_ptr)+ ; AC
  LD PCRT__BASE_PS
  ST (&tcb_ptr)+ ; PS
  LD &ip
  ST (&tcb_ptr)+ ; IP
  LD (&tcb_ptr)+ ; skip SPO
  CLA
  ST (&tcb_ptr)+ ; stack size

  ; clear stack memory
  LD $_PROC__TCB_STACK_SIZE   
  PUSH
  LD (&tcb_ptr+1)+ ; stack data ptr
  PUSH
  CLA
  FCALL ($MEMSET_PTR)
  POP
  POP

  LD $_SYS_PROC__CUR_PROCESSES_COUNT
  INC 
  ST $_SYS_PROC__CUR_PROCESSES_COUNT

  LD &proc_id
  JUMP PCRT__END
PCRT__INVALID:
  LD #0xFF

PCRT__END:
; begin epilogue
  APOP
  RET
; end epilogue
; end func PROC_INIT



; func PROC_KILL: (proc_id) kill process / stop execution
; Do not do any clear to make it lighter (PROC_CREATE would do it for us)
; 
; params: AC: proc_id
; stack:
; &: ptr
; begin func
EXPORT PROC_KILL:
  APUSH
  FCALL ($PROC_GET_TCB_PTR_PTR)
  ST &ptr
  LD #0xFF
  ST (&ptr)
  APOP
  RET
; end func PROC_KILL


; func PROC_START: () loads and starts new process
; 
; return: AC: process id or 0xFFFF if could not create
; stack:
; &: proc_id
; &: ret_addr
; begin globals
PSTRT__STR_RUN: WORD "Process created ID: "
PSTRT__STR_FAIL_LOAD: WORD "Loading failed"
PSTRT__STR_FAIL_CNT: WORD "Max proc count"
PSTRT__STR_FAIL_ADD: WORD "Proc register failed"
PSTRT__READER: WORD $LOADER_RAM_READER
; end globals
; begin func
PROC_START:
; begin prologue
  APUSH
; end prologue

  LD $_SYS_PROC__CUR_PROCESSES_COUNT
  INC
  CMP $_SYS_PROC__PROCESSES_MAX
  BHIS PSTRT__FAIL_CNT

  LD PSTRT__READER
  FCALL ($LOAD_BIN_PTR)
  BZS PSTRT__FAIL_LOAD

  ; ac=target ip
  FCALL ($PROC_INIT_PTR)
  ST &proc_id
  BMI PSTRT__FAIL_ADD

  LD PSTRT__STR_RUN_PTR
  FCALL ($PRINT_PTR)
  LD &proc_id
  FCALL ($ITOA_CHAR_PTR)
  FCALL ($PRINT_CHAR_PTR)
  FCALL ($PRINT_ENDL_PTR)

  LD &proc_id
  JUMP PSTRT__END

PSTRT__FAIL_LOAD:
  LD PSTRT__STR_FAIL_LOAD_PTR
  JUMP PSTRT__FAIL
PSTRT__FAIL_CNT:
  LD PSTRT__STR_FAIL_CNT_PTR
  JUMP PSTRT__FAIL
PSTRT__FAIL_ADD:
  LD PSTRT__STR_FAIL_ADD_PTR
  JUMP PSTRT__FAIL
PSTRT__FAIL:
  FCALL ($PRINTLN_PTR)
  LD &proc_id
  FCALL ($PROC_KILL_PTR)
  LD #0xFF

PSTRT__END:  
; begin epilogue
  APOP
  RET
; end epilogue
; end func PROC_START
