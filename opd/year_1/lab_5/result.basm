ORG 0x494
; func MAIN: reads string from keyboard and outputs to text printer
; begin func
START:
  CLA

  LD $STR_PTR
  PUSH
  CALL $READ_STRING
  POP
  POP
  
  LD $STR_PTR
  INC ; PRINT takes NUL-ended strings
  CALL $PRINT

  HLT
; end func MAIN
;Ñ‹7W

ORG 0x10
; func READ_STRING: read text string from device in format:
; (00@1b LEN@1b) (char[1] char[0]) ... (char[i]@1b char[i-1]@1b) ...
; 
; requires: free memory of 129 2bwords (= ceil(255chars / 2byte_in_word) + 1word_for_length = 129 words) starting from addr in &2
;
; params: STACK 1: address in memory from which the result will be placed;
; return: AC: string length 1 byte (max 255 character)
;         MEM: string starting at mem addr passed in &2
; affects: AC
; stack:   &0 - current character id
;          &1 - length
;          &2 - ret addr
;          &3 - param (addr)
; begin globals:
RS_CUR_POINTER: WORD ?    ; contains address of memory cell being currently written in output. Initialized with &3.
; end globals
; begin func
READ_STRING:
; begin prologue
  PUSH 
  PUSH 
; end prologue

  ; get base output address 
  LD &3
  ST $RS_CUR_POINTER

  ; read length
  CALL $READ_DEV
  
  SUB #0x30 ; ASCII char to decimal number

  ST &1
  ST (RS_CUR_POINTER)+

  ; set character id to zero 
  CLA
  ST &0

; begin loop
  RS_LOOP:  
    LD &0 ; cur id

    CMP &1
    BGE RS_FINISH ; check end

    INC 
    ST &0 ; i++

    AND #1 ; check parity (inverted because of INC)
  ; begin if 
    BZC RS_EVEN_STEP
  ; begin if branch for higher byte - odd id
    CALL $READ_DEV
    SWAB 
    OR (RS_CUR_POINTER) ; join old low and new high bytes
    
    ST (RS_CUR_POINTER)+ ; next char belongs to new word => do increment
    JUMP RS_LOOP
  ; end branch
  RS_EVEN_STEP:
  ; begin if branch for lower byte - even id
    CALL $READ_DEV
    ST (RS_CUR_POINTER)
    JUMP RS_LOOP
  ; end if
; end loop

RS_FINISH:
; begin epilogue
  POP
  POP ; length as return in AC
  RET
; end func READ_STRING


; func READ_DEV: pool device (keyboard) for ready and reads 1 byte for it
;
; params: none
; return: AC: data read from dev
; begin func
READ_DEV:
RD_LOOP:
  IN 0x19
  AND #0x40
  BZS RD_LOOP
RD_MAIN:
  IN 0x18
  RET
; end func READ_DEV


; func PUT_CHAR: outputs one char to text printer with wait for device availability
; 
; params: AC - 1b character in low byte
; return: none
; begin func
PUT_CHAR:
  PUSH ; store target char

  PUT_CHAR_LOOP:
    IN 0xD
    AND #0x40
    BZS PUT_CHAR_LOOP

  POP
  OUT 0xC
  RET
; end func PUT_CHAR


; func PRINT: outputs string to text printer 
; string should be in format: (char[i+1]@1b,char[i]1b), ..., (NUL, NUL/char[n]) 
; 
; requires: string encoding should be aggreed between output device and input string. 1b encoding allowed only
; params: AC - pointer to first string data address
; return: none
; stack:  &0 - ret addr
; begin globals:
PRINT_CUR: WORD ? ; pointer/iterator to currect mem address
; end globals
; begin func
PRINT:
  ST PRINT_CUR

; begin loop
PRINT_LOOP:
  LD (PRINT_CUR)+

  BZS PRINT_EXIT
  CALL $PUT_CHAR

  SWAB
  
  AND $MASK_LOW
  BZS PRINT_EXIT
  CALL $PUT_CHAR

  JUMP PRINT_LOOP
; end loop
PRINT_EXIT:
  RET
; end func PRINT


; begin data global
ORG 0x5B4
STR:        WORD 129 DUP (0)
STR_PTR:    WORD $STR
MASK_LOW:   WORD 0xFF
; end data
