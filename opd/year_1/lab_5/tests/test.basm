
ORG 0x10
START:

LP:
  IN 1D
  AND #0x40
  BZS LP
  IN 1C
  HLT

  ; LD DATA_REF
  ; CALL PRINT
  ; HLT

  ; LD X_CNT
  ; OUT 0x10
  ; LOOP $X_CNT
  ; JUMP START
  ; CALL 
  ; LOOP X_CNT
  ; JUMP START
  HLT

S1:
  IN 0x11
  AND #0x40
  BZS S1

  LD #32
  ST X_CNT

  CLA
  NOT
PUT_COL:
  DEC
  ; CMP #0xFF
  ; BLT PUT 
  ; CLA
PUT:
  OUT 0x10
  LOOP X_CNT
  JUMP PUT_COL
  ; HLT


DATA: WORD 0xF0,0xD2,0xC9,0xD7,0xC5,0xD4,0x0
DATA_REF: WORD $DATA
X_CNT: WORD 0x10

PRINT:  ; AC - pointer to first data address; ends on 0x0
  ST PRINT_CUR
PRINT_LOOP:
  LD (PRINT_CUR)+
  BZS PRINT_EXIT
  OUT 0xC
  JUMP PRINT_LOOP
PRINT_EXIT:
  RET
PRINT_CUR: WORD ?




; FIXED_STR_TO_NUL_ENDED: convert string with length pad prefix word (0x00, len@1b) to (data + 0x0000); 
; Done by 
; 
; requires: memory allocated for output array accor
; params: STACK 1 - pointer to first input string memory
;         STACK 2 - pointer to first output string memory
; stack:  0 - length
;           - return addr
;           - 
;           - 
; return: none
; globals:
FSTNE_IN_POINTER: WORD ?
FSTNE_OUT_POINTER: WORD ?
; begin func
FIXED_STR_TO_NUL_ENDED:
; begin prologue

; end prologue
  LD &
  ST FSTNE_IN_POINTER

  LD &
  ST FSTNE_OUT_POINTER

  LD (FSTNE_IN_POINTER)+
  ST &0 ; length

FSTNE_LOOP:
  LD (FSTNE_IN_POINTER)+
  ST (FSTNE_OUT_POINTER)+
  LOOP &0
  JUMP FSTNE_LOOP

  CLA
  ST (FSTNE_OUT_POINTER)+

; begin epilogue
  POP
; end func