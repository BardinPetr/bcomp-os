; ----------------------------- OS -----------------------------


; func OS__INIT: OS start procedure
; 
; params:
; return: 
; stack:
; &: ret_addr
; begin globals
OSI__INIT_STR: WORD "Initializing..."
OSI__START_STR: WORD "System started"
OSI__END_STR: WORD "System halt"
; end globals
; begin func
EXPORT OS__INIT:
; begin prologue
  APUSH
; end prologue
  DI
  
  FCALL ($PRINT_CLEAR_PTR)

  LD OSI__INIT_STR_PTR
  FCALL ($PRINTLN_PTR)

  ; prepare process manager
  FCALL ($PROCMEM__INIT_PTR)
  RSP ; sp_origin
  FCALL ($PROC__INIT_MANAGER_PTR)

  ; setup interrupts
  FCALL ($INT__INIT_PTR)
  LD #1 ; 10Hz
  FCALL ($OS__SETUP_SWITCH_TIMER_PTR)
  
  ; init end
  LD OSI__START_STR_PTR
  FCALL ($PRINTLN_PTR)
  FCALL ($PRINT_ENDL_PTR)

  ; LD $SHELL_PROC_PTR
  ; FCALL ($PROC_INIT_PTR)
  ; JUMP (SHELL_PROC_PTR)

  LD PROC0_PTR
  FCALL ($PROC_INIT_PTR)
  LD PROC1_PTR
  FCALL ($PROC_INIT_PTR)
  JUMP PROC0_PTR


  LD OSI__END_STR_PTR
  FCALL ($PRINTLN_PTR)
  
; begin epilogue
  APOP
  RET
; end epilogue
; end func OS__INIT



; func OS__PANIC: ()
; begin globals
OSI__PANIC_STR: WORD "Kernel panic!"
; end globals
; begin func
EXPORT OS__PANIC:
  LD $OSI__PANIC_STR
  HLT
; end func OS__PANIC



PROC0_PTR: WORD $PROC0
PROC0_STR: WORD "0000"
PROC0:
  LD PROC0_STR_PTR
  FCALL ($PRINTLN_PTR)
  JUMP PROC0

PROC1_PTR: WORD $PROC1
PROC1_STR: WORD "1111"
PROC1:
  LD PROC1_STR_PTR
  FCALL ($PRINTLN_PTR)
  JUMP PROC1
