; ----------------------------- ARRAYS SUPPORT LIBRARY -----------------------------

; Array is managed via functions from this library using single pointer created by
; Data is placed on heap. Any array have header before the array pointer followed by data cells



; func ARRAY_GET_FC: (src, id) get array item by index
; 
; conv: fastcall
; params: AC: src
;         STACK: id (from 0)
; return: value
; stack:
; &: ret_addr
; &: id
; begin func
ARRAY_GET_FC:
  APUSH
  ; array start in AC
  ADD &id
  ST &id

; begin epilogue
  POP
  SWAP
  LD (&id)
; end epilogue
  APOP
  RET
; end func ARRAY_GET_FC


; func ARRAY_SET: (src, id, val) set array item by index
;
; params: AC: src
;         STACK: id (from 0)
;         STACK: val
; return: value
; stack:
; &: ret_addr
; &: id
; &: val
; begin func
ARRAY_SET:
  ; array start in AC
  ADD &id
  ST &id ; id += src
  LD &val
  ST (&id)

  RET
; end func ARRAY_SET


; func ARRAY_LOWER_BOUND: (addr, val) lineary searches for lower bound of number in sorted array
; (maximum element that is lower than val or 0xFFFF if no such exist)
; 
; params: AC: addr
;         STACK: val
; return: lower bound of element as array index
; stack:
; &: cur_ptr
; &: pos
; &: ret_addr
; &: val
; begin func
ARRAY_LOWER_BOUND:
; begin prologue
  APUSH
; end prologue

  ; addr in AC
  ST &cur_ptr

  ; get last element index  
  CALL $MSIZE
  ST &pos

  ; move pointer to the element after the last
  ADD &cur_ptr
  ST &cur_ptr

  ; begin loop
  ALB__LOOP: 
    LD &val
    CMP -(&cur_ptr)
    BHIS ALB__END
    LOOP &pos
    JUMP ALB__LOOP
  ; end loop

ALB__END:
  LD &pos
  DEC ; ret

; begin epilogue
  APOP
  RET
; end epilogue
; end func ARRAY_LOWER_BOUND
