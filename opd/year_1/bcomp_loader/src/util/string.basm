; ----------------------------- STRING UTILITIES LIBRARY -----------------------------
; string format: (char[1] char[0]) ... (char[i+1]@1b char[i]@1b) (0x00, 0x00/char[2n-1])


; func ATOI: (src, radix) converts string number to int 
; 
; params: AC src: pointer to NUL-ended string
;         STACK radix: number radix
; return: AC: unsigned 2byte integer
; stack:  
; &: cur_radix_pow
; &: index
; &: byte_cnt
; &: src
; &: sum
; &: ret_addr
; &: radix
; begin globals
ATOI__STR_PTR: WORD ?
ATOI__LOW_MASK: WORD 0xFF
; end globals
; begin func
ATOI:
; begin prologue
  APUSH
; end prologue

  ST &src
  CALL $STRING_LEN
  ST &byte_cnt

  LD &byte_cnt ; symbol number
  ADD #2
  ASR
  ASL 
  ST &byte_cnt ; count zero bytes (one or two NUL due char count partity)
  
  ; start interation from last symbol (last byte) 
  ASR ; bytes to words
  ADD &src
  ST ATOI__STR_PTR

  CLA 
  ST &sum
  ST &index
  INC
  ; 1, radix, radix^2, ...
  ST &cur_radix_pow

  ; reading from back. high then low bytes
  ; begin loop
  ATOI__LOOP:
    LD &index
    CMP &byte_cnt
    BEQ ATOI__END        
    INC
    ST &index

    ; begin if index % 2
    ROR
    BCC ATOI__ODD_ITER
    ; begin branch even iter -> high byte
      LD -(ATOI__STR_PTR)
      SWAB
      AND ATOI__LOW_MASK
      BZS ATOI__LOOP
      JUMP ATOI__PROCESS_CHAR
    ; begin branch odd iter -> low byte
    ATOI__ODD_ITER:
      LD (ATOI__STR_PTR)
      AND ATOI__LOW_MASK
      BZS ATOI__LOOP
    ; end if

    ATOI__PROCESS_CHAR:
    CALL $ATOI_CHAR

    ; sum += cur_radix_pow * ATOI(char[i])
    PUSH  
    LD &cur_radix_pow+1
    CALL $MUL 
    ; save sum
    ADD &sum+1
    ST &sum+1
    POP

    ; cur_radix_pow *= radix
    LD &radix
    PUSH
    LD &cur_radix_pow+1
    CALL $MUL
    ST &cur_radix_pow+1
    POP
    JUMP ATOI__LOOP
  ; end loop

  ATOI__END:
; begin epilogue
  ; sum is last pop so in AC
  APOP
  RET
; end epilogue
; end func ATOI


; func ATOI_CHAR: (char) returns integer representation of character with radix up to 36
; uses sequence 0,1,...,9,A(a),B(b),...,Z(z)
; params: AC char: input character
; return: AC: int value 
; begin func
ATOI_CHAR:
  ; begin if
  CMP #0x3A
  BLT ATOI_CHAR__ISNUM
  ; begin branch char >= 10
    SUB #0x37 ; A=0x41, A is 10
    
    ; begin if
    CMP #0x2A ; A=0x41, a = 0x61; 0x61-0x37 = 0x2A
    BLT ATOI_CHAR__END
    ; begin branch char in [a..z]
      SUB #0x20
      JUMP ATOI_CHAR__END
    ; end if
  ; begin branch char < 10
  ATOI_CHAR__ISNUM:
    SUB #0x30
  ; end if
ATOI_CHAR__END:
  RET
; end func ATOI_CHAR


; func ITOA_CHAR: (val) returns character representation of one digit in some radix up to 36
; uses sequence 0,1,...,9,A,B,...,Z
; params: AC val: integer input digit
; return: AC: char value 
; begin func
ITOA_CHAR:
  ; begin if
  CMP #0xA
  BLT ITOA_CHAR__ISNUM
  ; begin branch char >= 10
    ADD #0x37 ; A=0x41, A is 10
    JUMP ITOA_CHAR__END
  ; begin branch char < 10
  ITOA_CHAR__ISNUM:
    ADD #0x30
  ; end if
ITOA_CHAR__END:
  RET
; end func ITOA_CHAR



; func STRING_LEN: (ptr) get length of nul-ended string
; 
; params: AC: ptr: ponter 
; return: AC: length in symbols
; stack:
; &: cnt
; &: ret_addr
; begin globals
SLEN__CUR_PTR: WORD ?
SLEN__HMASK: WORD 0xFF00
SLEN__LMASK: WORD 0xFF
; end globals
; begin func
STRING_LEN:
; begin prologue
  APUSH
; end prologue

  ST SLEN__CUR_PTR
  CLA
  ST &cnt

  ; begin loop
  SLEN__LOOP:
    LD (SLEN__CUR_PTR)
    AND SLEN__LMASK
    BZS SLEN__END

    LD (SLEN__CUR_PTR)+
    ; begin if 
    AND SLEN__HMASK
    BZS SLEN__ADD_ONE
    ; begin branch if 0xYYZZ
      LD &cnt
      ADD #2
      ST &cnt
      JUMP SLEN__LOOP
    ; begin branch if 0x00ZZ
    SLEN__ADD_ONE:
      LD &cnt
      INC
      ST &cnt
      JUMP SLEN__END
    ; end if
  ; end loop

  SLEN__END:
; begin epilogue
  ; cnt is last pop, put into AC
  APOP
  RET
; end epilogue
; end func STRING_LEN
