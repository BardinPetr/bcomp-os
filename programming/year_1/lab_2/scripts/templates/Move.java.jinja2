{%- import 'MoveEffectMacro.jinja2' as move_effects -%}

package ru.bardinpetr.itmo.lab_2.moves;

import ru.ifmo.se.pokemon.{{ att_superclass }};
import ru.ifmo.se.pokemon.Type;

{%- if effect['apply_self'] or effect['apply_opp'] %}
    import ru.ifmo.se.pokemon.Effect;
    import ru.ifmo.se.pokemon.Pokemon;
{% endif %}

{%- if effect['is_stats'] %}
    import ru.ifmo.se.pokemon.Stat;
{% endif %}



/**
* {{ full_desc }}
* @author Bardin Petr
*/
public class {{ name|class_format }} extends {{ att_superclass }} {
{{ move_effects.doubleNormConst(effect['is_ailment'], 'AILMENT_CHANCE', effect['ailment_chance']) }}
{{ move_effects.doubleNormConst(effect['is_stats'], 'STATS_CHANCE', effect['stats_chance']) }}

public {{ name|class_format }}() {
super(Type.{{ m.type.name|upper_format }}, {{ m.power|default(0, true) / 100 }}, {{ m.accuracy|default(100, true) / 100 }}, {{ m.priority|default(0, true) }}, {{ m.meta.max_hits|default(1, true) }});
}

@Override
protected String describe() {
return "{{ desc }}";
}

{% if m.accuracy is none %}
    @Override
    protected boolean checkAccuracy(Pokemon pokemon, Pokemon pokemon1) {
    return true;
    }
{% endif %}

{% for i in ['apply_self', 'apply_opp'] -%}
    {% if effect[i] %}
        {% call move_effects.applyEffect('Self' if i == 'apply_self' else 'Opp') %}
            {{ move_effects.applyAilment('AILMENT_CHANCE', effect["ailment"]) }}
            {{ move_effects.applyStats('STATS_CHANCE', effect["stats_changes"]) }}
        {% endcall %}
    {% endif %}
{% endfor %}
}
