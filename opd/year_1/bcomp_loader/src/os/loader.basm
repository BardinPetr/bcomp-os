; ----------------------------- DYNAMIC PROGRAM LOADER -----------------------------

; func LOAD_BIN: loads programm from binary to RAM and relocates sectors sequentially.
; Changes all absolute address commands to point into relocated addresses.
; Indirect addressing should be used inside single sector only.
; Remap of poiners created via "DATA $X" construction is not supported.
; Uses LB__NEXT_INPUT_WORD as streaming source of 2b words for binary.
; Program is loaded from LB__LOAD_POINT up to LB__USERSPACE_END.
; 
; return: AC: start address of program  
; stack:
; &: cur_cmd
; &: cur_section_org_delta
; &: cur_section_len
; &: cur_section_offset
; &: cur_section_org
; &: cur_section_cnt
; &: real_org
; &: start_addr
; &: section_cnt
; &: ret_addr
; begin globals
LB__CMD_ADDR_TYPE_MASK: WORD 0x0800 ; (0000 1000 0000 0000)
LB__CMD_ADDRESS_MASK: WORD 0x7FF
LB__ABS_CMD_MIN_VAL: WORD 0x2000
LB__ABS_CMD_MAX_VAL: WORD 0xF000
LB__USERSPACE_END: WORD 0x700
LB__NEXT_INPUT_WORD: WORD $READ_WORD_DEMO
; LB__LOAD_POINT: WORD $CODE_END_PTR ; address of userspace memory beginning  
; LB__LOAD_POINT: WORD 0x600
LB__LOAD_PTR: WORD ?
LB__SEC_LEN: WORD 0x8004, 0x1
LB__SEC_LEN_PTR: WORD $LB__SEC_LEN
LB__SEC_DELTA: WORD 0xFBFC, 0x0, 0x0, 0xFB00, 0xFB00
LB__SEC_DELTA_2: WORD 0xFB00
LB__SEC_DELTA_PTR: WORD $LB__SEC_DELTA
; end globals
; begin func
LOAD_BIN:
  ; begin prologue
  APUSH
  ; end prologue
  LD $LB__STR_STARTED_PTR
  CALL $PRINT

  CALL (LB__NEXT_INPUT_WORD)
  ST &section_cnt
  ST &cur_section_cnt

  CALL (LB__NEXT_INPUT_WORD)
  ST &start_addr

  LD $_SYS_CODE_END_PTR
  ST LB__LOAD_PTR
  ST &real_org

  ; begin loop over sections
  LB__LOAD_SECT_LOOP:    
    CALL (LB__NEXT_INPUT_WORD)
    ST &cur_section_offset

    CALL (LB__NEXT_INPUT_WORD)
    ST &cur_section_len
  
    CALL (LB__NEXT_INPUT_WORD)
    ST &cur_section_org
    ; calculate org delta (section_org - real_section_org)
    SUB &real_org
    ST &cur_section_org_delta

    ; increase targer org counter
    LD &real_org
    ADD &cur_section_len
    ST &real_org

    ; begin if check memory availability
    CMP LB__USERSPACE_END
    BLT LB__SECTION_VALID 
    ; begin branch section out of space
      ; LD $LB__STR_NO_SPACE_PTR
      ; CALL $PRINT
      JUMP LB__END
    ; end if

    LB__SECTION_VALID:
    LOOP &cur_section_cnt
    JUMP LB__LOAD_SECT_LOOP
  ; end loop over sections

  LD $LB__STR_HEADER_OK_PTR
  CALL $PRINT

  ; restart sections iteration
  LD &section_cnt
  ST &cur_section_cnt

  ; begin loop over sections
  LB__SECT_LOOP:    
    ; TODO: load cur_section_len
    LD (LB__SEC_LEN_PTR)
    ASL
    ASR
    ST &cur_section_len

    LD (LB__SEC_LEN_PTR)+
    ; begin if cur_section_len[15]
    ROL
    BCS LB__CODE_SEC
    ; begin branch if data sector
      ; begin loop over data
      LB__DATA_CMD_LOOP:
        CALL (LB__NEXT_INPUT_WORD)
        ST (LB__LOAD_PTR)+

        LOOP &cur_section_len
        JUMP LB__DATA_CMD_LOOP
      ; end loop over data
      JUMP LB__SEC_RELOC_END

    ; begin branch if code sector
    LB__CODE_SEC:
      ; begin loop over commands
      LB__CODE_CMD_LOOP:
        LD (LB__SEC_DELTA_PTR)+
        ST &cur_section_org_delta        

        CALL (LB__NEXT_INPUT_WORD) ; load command
        ST &cur_cmd

        ; begin if addressed : CMD >= 0x2000, CMD < 0xF000,  absolute: CMD[11]=0
        CMP LB__ABS_CMD_MAX_VAL  
        BHIS LB__OTHER_CMD
        CMP LB__ABS_CMD_MIN_VAL
        BLO LB__OTHER_CMD
        AND LB__CMD_ADDR_TYPE_MASK
        BZC LB__OTHER_CMD_WITH_LD
        ; begin branch absolute addressing
          ; TODO set cur_section_org_delta
          LD &cur_cmd
          AND LB__CMD_ADDRESS_MASK
          
           
          
          ; (cur_cmd - org_delta) = (cmd_id + section_org) - (section_org - real_section_org) = cmd_id + real_section_org
          LD &cur_cmd
          SUB &cur_section_org_delta 
          JUMP LB__OTHER_CMD
        ; begin branch not absolute addressing
        LB__OTHER_CMD_WITH_LD:
          LD &cur_cmd
        LB__OTHER_CMD:
          ST (LB__LOAD_PTR)+ ; load command
        ; end if

        LOOP &cur_section_len
        JUMP LB__CODE_CMD_LOOP
      ; end loop over commands

    ; end if
    LB__SEC_RELOC_END:

    LD &section_cnt
    SUB &cur_section_cnt
    CALL $ITOA_CHAR
    CALL $PRINT_CHAR

    LD $LB__STR_SECTION_LOADED_PTR
    CALL $PRINT

    LOOP &cur_section_cnt
    JUMP LB__SECT_LOOP
  ; end loop over sections

LB__END:

  LD $LB__STR_FULL_LOADED_PTR
  CALL $PRINT

  ; calculate new start address and return in AC
  LD &start_addr
  ; TODO: load delta
  SUB $LB__SEC_DELTA_2
  ST &section_cnt ; store to next stack item after ret addr so last POP will put it in AC

; begin epilogue
  APOP
  RET
; end epilogue

; begin globals strings 
LB__STR_STARTED: WORD "Started loading program\n\r"
LB__STR_NO_SPACE: WORD "Not enough RAM to load program\n\r"
LB__STR_HEADER_OK: WORD "Header parsed and valid\n\r"
LB__STR_SECTION_LOADED: WORD " section loaded\n\r"
LB__STR_FULL_LOADED: WORD "Loading successful\n\r"
; end globals
; end func LOAD_BIN
