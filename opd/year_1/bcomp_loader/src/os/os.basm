; ----------------------------- OS -----------------------------


; func OS__INIT: OS start procedure
; 
; params:
; return: 
; stack:
; &: tcb
; &: ret_addr
; begin globals
OSI__INIT_STR: WORD "Initializing..."
OSI__START_STR: WORD "System started"
OSI__END_STR: WORD "System halt"
OSI__TMP: WORD ?
OSI__TMP3: WORD 0x710
OSI__IP: WORD $PROC1
OSI__PS: WORD 0x180
; end globals
; begin func
OS__INIT:
; begin prologue
  APUSH
; end prologue

  CALL $PRINT_CLEAR
  LD OSI__INIT_STR_PTR
  CALL $PRINTLN

  ; reserve processes array
  LD $_SYS_PROC__PROCESSES_MAX
  CALL $MALLOC
  ST $_SYS_PROC__PROCESSES_LIST_PTR

  ; set userspace begin
  LD $_SYS__USERSPACE_BEGIN
  ST $_SYS_PROC__FREE_MEM_START

  ; begin block setup interrupts section
  CALL $INT__INIT

  LD #1 ; 10Hz
  CALL $OS__SETUP_SWITCH_TIMER
  ; EI
  ; end block ints

  LD OSI__START_STR_PTR
  CALL $PRINTLN
  CALL $PRINT_ENDL

  ; CALL $SHELL_MAIN

  ; LD OSI__END_STR_PTR
  ; CALL $PRINTLN

  LD #0x20
  CALL $MALLOC
  ST &tcb
  
  ADD #4
  ST OSI__TMP
  RSP
  ST (OSI__TMP)+
  LD (OSI__TMP)+
  LD OSI__TMP3
  ST (OSI__TMP)

  LD #1
  PUSH
  LD #2
  PUSH
  LD #3
  PUSH
  LD OSI__IP ; ip
  INC
  PUSH
  LD OSI__PS ; ps
  PUSH
  LD #4 ; ac
  PUSH

  LD &tcb+6
  CALL $PROC_SAVE_STATE

  CLA
  PUSH 
  PUSH 
  PUSH 
  PUSH 
  PUSH 
  PUSH 
  PUSH 
  PUSH 
  PUSH 
  PUSH 
  POP 
  POP 
  POP 
  POP 
  POP
  POP 
  POP 
  POP 
  POP 
  POP


  LD &tcb
  CALL $PROC_LOAD_STATE

; begin epilogue
  APOP
  RET
; end epilogue
; end func OS__INIT


PROC1:
  POP
  HLT
  POP
  POP
  POP


; func OS__CONTEXT_SWITCH_INT: () interrupt to swtich current execution context for multitasking
; Should be called with timer
; 
; stack:
; &: cur_acc
; &: cur_prog_state
; &: cur_ret_addr
; begin globals
OS__CONTEXT_SWITCH_INT_PTR: WORD $OS__CONTEXT_SWITCH_INT
OS__CSI__TEXT: WORD "switch"
; end globals
; begin func
OS__CONTEXT_SWITCH_INT:
; begin prologue
; end prologue

; here is PS on stack top an IP the next
  PUSH ; cur accumulator value
  CALL $PROC_SAVE_STATE
  

  ; LD OS__CSI__TEXT_PTR
  ; CALL $PRINTLN

  IN 0 ; reset timer


; begin epilogue
  APOP
  POP
  IRET
; end epilogue
; end func OS__CONTEXT_SWITCH_INT



; func OS__SETUP_SWITCH_TIMER: (period)
; 
; params: AC: period (real period = period * 100ms)
; stack:
; &: period
; &: ret_addr
; begin func
OS__SETUP_SWITCH_TIMER:
; begin prologue
  APUSH
; end prologue

  ST &period

  LD $OS__CONTEXT_SWITCH_INT_PTR
  CALL $INT__REGISTER_HANDLER

  PUSH
  CLA ; timer DEV#0
  CALL $DEV__INT_ON
  POP
  
  CLA ; DEV#0 DR = 0
  PUSH
  LD &period+1
  CALL $DEV__OUT
  POP

; begin epilogue
  APOP
  RET
; end epilogue
; end func OS__SETUP_SWITCH_TIMER

