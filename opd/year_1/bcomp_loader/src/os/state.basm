; ----------------------------- STACK OPERATIONS -----------------------------

; thread control block (7words)
; id@2b
; ac@2b
; ps@2b
; ip@2b
; sp_origin@2b (SP that was before target is started - points to memory cell before first process own stack cell)
; stack_size@2b
; stack_data_ptr@2b

; Stack data descriptor (pointed by stack_data_ptr)
; (stack stored with top as first element)
; stack[SP]
; stack[SP+1]
; ...
; stack[SP+stack_size-1]


; _SYS__TCB_BEGIN: WORD 0x700
; _SYS__TCB_END: WORD 0x77F
; _PROC__TCB_DESCR_PTRS: WORD 0x700, 0x707, 0x70E ; 0x700-0x715, each struct 7 words, from 0x700
; _PROC__TCB_STACK_PTRS: WORD 0x715, 0x735, 0x755 ; 0x715-0x77F, each stack allocated with 32 words, from 0x715  

; begin globals
_PROC__TCB_DESCR_BEGIN: WORD 0x700
_PROC__TCB_STACK_BEGIN: WORD 0x715
; end globals



; func PROC_GET_TCB_PTR: (id) get TCB pointer for process with id 
; 
; params: AC: id
; return: AC: address of the TCB of process
PROC_GET_TCB_PTR:
  MUL #7
  ADD _PROC__TCB_DESCR_BEGIN
  RET
; end func PROC_GET_TCB_PTR



; func PROC_GET_STACK_PTR: (id) get stack storage pointer for process with id 
; 
; params: AC: id
; return: AC: address of stack memory segment for process
PROC_GET_STACK_PTR:
  MUL #32
  ADD _PROC__TCB_STACK_BEGIN
  RET
; end func PROC_GET_STACK_PTR



; func PROC_SAVE_STATE: (process_id) saves state to TCB, moves stack and sets SP to the sp_origin (+this func ret addr)
; intended to called when stack have following structure:
;     (top)
;   - ret addr of PROC_SAVE_STATE
;   - ac of stopped thread
;   - ps 
;   - ip 
;     (here stack of thread begins)
; affects: destroys SP and stack up to tcb.sp_origin
; convention: fastcall
; params: AC: process_id - process id which is going to be saved
; stack:
; &: stack_origin
; &: stack_size
; &: ret_addr
; &: last_ac
; &: last_ps
; &: last_ip
; begin globals
PSS__TCB_PTR: WORD ?
PSS__RET: WORD ?
; end globals
; begin func
PROC_SAVE_STATE:
  APUSH

  CALL PROC_GET_TCB_PTR

  INC ; skip id
  ST PSS__TCB_PTR

  LD &last_ac
  ST (PSS__TCB_PTR)+
  LD &last_ps
  ST (PSS__TCB_PTR)+
  LD &last_ip
  ST (PSS__TCB_PTR)+

  LD &ret_addr
  ST PSS__RET

  LD (PSS__TCB_PTR)+ ; stack origin
  ST &stack_origin

  RSP
  ; update following number with (4 + $local variables count$)
  ADD #6 ; points to top of thread stack
  PUSH ; src

  ; calculate length
  SUB &stack_origin+1
  NEG 
  ST &stack_size+1
  ST (PSS__TCB_PTR)+ ; save stack size

  LD (PSS__TCB_PTR) ; stack_data_ptr
  PUSH ; dst
  
  LD -(PSS__TCB_PTR) ; get stack size
  ; cnt
  CALL $MEMCPY 

  POP
  POP
  
  LD &stack_origin
  WSP

; begin epilogue
  LD PSS__RET ; restore this function return address
  PUSH 
  ; warning: no pop/spadd/apop should be called as stack is cleared!
  RET
; end func PROC_SAVE_STATE




; func PROC_LOAD_STATE: (process_id) restores full process state from TCB. 
; After exit will jump into restored process!!!
; We down use memcpy as it would require it to be rewritten to be safe even with stack damaged what would slow it down.
; 
; affects: AC, SP, IP, PS, stack data - all restored to values right before PROC_SAVE_STATE according to TCB data
; convention: fastcall
; params: AC: process_id - process id which should be loaded 
; stack: WARNING: use of stack (and APOP/APUSH) is prohibited here as function alters SP and rewrites stack region
; begin globals
PLS__TCB_PTR: WORD ?
PLS__BASE_TCB_PTR: WORD ?
PLS__STACK_DATA_PTR: WORD ?
PLS__CNT: WORD ?
; end globals
; begin func
PROC_LOAD_STATE:
  CALL PROC_GET_TCB_PTR

  ST PLS__BASE_TCB_PTR
  
  ADD #6 ; tcb.stack_data_ptr
  ST PLS__TCB_PTR
  LD (PLS__TCB_PTR)
  ST PLS__STACK_DATA_PTR

  LD -(PLS__TCB_PTR) ; tcb.stack_size
  ST PLS__CNT

  SUB -(PLS__TCB_PTR) ; tcb.sp_origin
  NEG
  ST PLS__TCB_PTR ; now used as stack memory pointer

  PLS__LOOP:
    LD (PLS__STACK_DATA_PTR)+
    ST (PLS__TCB_PTR)+
    LOOP PLS__CNT
    JUMP PLS__LOOP

  ; restore register states and do jump back to process 
  LD PLS__BASE_TCB_PTR
  ADD #6; move to tcb.stack_data_ptr
  ST PLS__TCB_PTR
  
  LD -(PLS__TCB_PTR) ; stack_size
  SUB -(PLS__TCB_PTR) ; sp_origin
  NEG
  WSP

  IN 0 ; reset context switch timer

  LD -(PLS__TCB_PTR) ; ip 
  PUSH
  LD -(PLS__TCB_PTR) ; ps
  PUSH
  LD -(PLS__TCB_PTR) ; ac 
  IRET

  ; no other RET/POP/APOP/SPADD should be done as this should be last function 
  ;   before control will be passed to restored process
; end func PROC_LOAD_STATE



