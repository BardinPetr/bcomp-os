; ----------------------------- OS -----------------------------


; func OS__INIT: OS start procedure
; 
; params:
; return: 
; stack:
; &: ret_addr
; begin globals
OSI__INIT_STR: WORD "Initializing..."
OSI__START_STR: WORD "System started"
OSI__END_STR: WORD "System halt"
; end globals
; begin func
OS__INIT:
; begin prologue
  APUSH
; end prologue
  DI

  CALL $PRINT_CLEAR

  LD OSI__INIT_STR_PTR
  CALL $PRINTLN

  ; prepare process manager
  CALL $PROCMEM__INIT
  RSP ; sp_origin
  CALL $PROC__INIT_MANAGER

  ; setup interrupts
  CALL $INT__INIT
  LD #5 ; 10Hz
  CALL $OS__SETUP_SWITCH_TIMER
  
  ; init end
  LD OSI__START_STR_PTR
  CALL $PRINTLN
  CALL $PRINT_ENDL

  LD PROC0_PTR
  CALL $PROC_INIT

  ; LD PROC1_PTR
  ; CALL $PROC_INIT

  ; LD PROC2_PTR
  ; CALL $PROC_INIT
  JUMP (PROC0_PTR)

  CALL $SHELL_MAIN

  LD OSI__END_STR_PTR
  CALL $PRINTLN
  
; begin epilogue
  APOP
  RET
; end epilogue
; end func OS__INIT



PROC0_PTR: WORD $PROC0
PROC0_STR: WORD "abcd"
PROC0:
  P0L:
  ; LD OSI__INIT_STR_PTR
  LD PROC0_STR_PTR
  CALL $PRINTLN
  ; LD #0x31
  ; CALL $PRINT_CHAR
  ; LD #0x11
  JUMP P0L

PROC1_PTR: WORD $PROC1
PROC1_STR: WORD "efgh"
PROC1:
  LD #0x25
  OUT 0x9

  ; LD PROC1_STR_PTR
  ; CALL $PRINT 
  ; CALL $PRINT_ENDL
  JUMP PROC1

PROC2_PTR: WORD $PROC2
PROC2_STR: WORD "ijkl"
PROC2:
  ; LD #0x33
  LD PROC2_STR_PTR
  CALL $PRINT
  JUMP PROC2

