ORG 0x494
START:
  CLA

  LD $STR_PTR
  PUSH
  LD #0x18
  PUSH
  CALL $READ_STRING
  POP
  POP

  LD $STR_PTR
  INC ; do not use first byte
  CALL $PRINT

  HLT



; READ_STRING: read text string from device in format:
; (00@1b LEN@1b) (char[1] char[0]) ... (char[i]@1b char[i-1]@1b) ...
; 
; requires: free memory of 129 2bwords (= ceil(255chars / 2byte_in_word) + 1word_for_length = 129 words) starting from addr in &2
; params: STACK 1: addr of dev DR registter
;         STACK 2: address in memory from which the result will be placed;
; return: AC: string length 1 byte (max 255 character)
;         MEM: string starting at mem addr passed in &2
; affects: AC
; convention: #TODO
; stack allocation:   &0 - current character id
;                     &1 - length
;                     &2 - ret addr
;                     &3 - param (dev)
;                     &4 - param (addr)
; globals:
RS_CUR_POINTER: WORD ?    ; contains address of memory cell being currently written in output. Initialized with &4.
; end globals
; begin func
READ_STRING: 
  ; begin prologue
  PUSH 
  PUSH 
  ; end prologue

  ; configure input device
  LD &3
  PUSH
  CALL $READ_DEV_INIT
  POP

  ; get base output address 
  LD &4
  ST $RS_CUR_POINTER

  ; read length
  CALL $READ_DEV
  CALL $ASCII_TO_DEC_NUM
  ST &1
  ST (RS_CUR_POINTER)+

  ; set character id to zero 
  CLA
  ST &0

; begin loop
  RS_LOOP:  
    LD &0 ; cur id

    CMP &1
    BGE RS_FINISH ; check end

    INC 
    ST &0 ; i++

    AND #1 ; check parity (inverted because of INC)
  ; begin if 
    BZC RS_EVEN_STEP
  ; if branch for higher byte - odd id
    CALL $READ_DEV
    SWAB 
    OR (RS_CUR_POINTER) ; join old low and new high bytes
    
    ST (RS_CUR_POINTER)+ ; next char belongs to new word => do increment
    JUMP RS_LOOP
  ; end branch
  RS_EVEN_STEP:
  ; if branch for lower byte - even id
    CALL $READ_DEV
    ST (RS_CUR_POINTER)
    JUMP RS_LOOP
  ; end if
; end loop

RS_FINISH:
; begin epilogue
  POP
  POP ; length as return in AC
  RET
; end func READ_STRING



; READ_DEV_INIT: rewrite code of READ_DEV to work with device specified
; 
; params: STACK &1: addr of dev DR register, assuming AC+1 is an SR reg
; return: none
; ------------------------------------------
READ_DEV_INIT:
  LD $MASK_HIGH 
  AND $RD_LOOP
  OR &1
  ST $RD_MAIN  ; change IN instruction to pass &1 as its argument instead of #num
  INC
  ST $RD_LOOP
  RET


; READ_DEV: pool device for ready and reads 1 byte for it
;
; requires: READ_DEV_INIT is needed to be run at least once and for every other changes of device (separated for speed)
; params: none
; return: AC: data read from dev
; ------------------------------------------
READ_DEV:
RD_LOOP:
  IN 0
  AND #0x40
  BZS RD_LOOP
RD_MAIN:
  IN 0
  RET



; func ASCII_TO_DEC_NUM: convert ASCII code of number to its value
; 
; params: AC: ASCII char ('0'-'9')
; return: AC: 1b number in [0, 9]
; begin func
ASCII_TO_DEC_NUM:
  SUB #0x30
  RET
; end func ASCII_TO_DEC_NUM


; begin data global
ORG 0x5B4
STR:        WORD 129 DUP (0)
STR_PTR:    WORD $STR
MASK_HIGH:  WORD 0xFF00
MASK_LOW:   WORD 0xFF
; end data


; PRINT_NUM: outputs one digit to console in ASCII
; 
; params: AC: input number in [0, 9]
; returns: none
; begin func
PRINT_NUM:
; begin prologue
  PUSH ; save AC
; end prologue

  ADD #0x30
  OUT 0xC

; begin epilogue
  POP
  RET
; end func PRINT_NUM


; PRINT: outputs string to text printer 
; string should be in format: (char[i+1]@1b,char[i]1b), ..., (NUL, NUL/char[n]) 
; 
; requires: string encoding should be aggreed between output device and input string. 1b encoding allowed only
; params: AC - pointer to first string data address
; return: none
; stack:  &0 - ret addr
; globals:
PRINT_CUR: WORD ? ; pointer/iterator to currect mem address
; end globals
; begin func
PRINT:
  ST PRINT_CUR

; begin loop
PRINT_LOOP:
  LD (PRINT_CUR)+

  BZS PRINT_EXIT
  OUT 0xC

  SWAB
  
  AND $MASK_LOW
  BZS PRINT_EXIT
  OUT 0xC

  JUMP PRINT_LOOP
; end loop
PRINT_EXIT:
  RET
; end func PRINT



; KOI8_TO_UTF8 - convert  
; 