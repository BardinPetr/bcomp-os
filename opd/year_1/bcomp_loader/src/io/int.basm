; ----------------------------- INTERRUPT MANAGEMENT -----------------------------

; begin globals
_SYS_INT__DEFAULT_HANDLER_PTR: WORD $_SYS_INT__DEFAULT_HANDLER
_SYS_INT__DEFAULT_PS: WORD 0x180
; end globals


; func DEFAULT_HANDLER: empty interrupt handler
; begin func
_SYS_INT__DEFAULT_HANDLER:
  IRET
; end func


; func INT__REGISTER_HANDLER: (addr) registers interrupt vector for first free slot
; 
; params: AC: addr: handler addr 
; return: vector number if OK, 0xFFFF if no handlers left
; stack:
; &: ptr
; &: target
; &: cur_id
; &: ret_addr
; begin func
EXPORT INT__REGISTER_HANDLER:
; begin prologue
  APUSH
; end prologue
  ST &target

  LD #0
  ST &cur_id

  IRH__LOOP:
    LD &cur_id
    CMP #8
    BHIS IRH__NO_FREE

    ASL
    ST &ptr
    LD (&ptr)
    CMP $_SYS_INT__DEFAULT_HANDLER_PTR
    BEQ IRH__SET

    LD &cur_id
    INC
    ST &cur_id
    JUMP IRH__LOOP

  ; no free handlers
IRH__NO_FREE:
  LD #0xFF
  ST &cur_id
  JUMP IRH__EXIT

IRH__SET:  
  LD &target ; set vector
  ST (&ptr)+

  LD $_SYS_INT__DEFAULT_PS
  ST (&ptr)
  
IRH__EXIT:
; begin epilogue
  LD &cur_id ; ret
  APOP
  RET
; end epilogue
; end func INT__REGISTER_HANDLER



; func INT__UNREGISTER_HANDLER: (id) unregister interrupt vector
; 
; params: AC: id: id of vector
; stack:
; &: ptr
; begin func
EXPORT INT__UNREGISTER_HANDLER:
; begin prologue
  APUSH
; end prologue

  ASL
  ST &ptr

  LD $_SYS_INT__DEFAULT_HANDLER_PTR
  ST (&ptr)+

  LD $_SYS_INT__DEFAULT_PS
  ST (&ptr)

  APOP
  RET
; end func INT__UNREGISTER_HANDLER



; func INT__INIT: () initializes interrupts to default values.
; stack:
; &: cur_id
; begin func
EXPORT INT__INIT:
; begin prologue
  APUSH
; end prologue

  LD #8
  ST &cur_id

  INTI__LOOP:
    LD &cur_id
    DEC
    FCALL ($INT__UNREGISTER_HANDLER_PTR)
    LOOP &cur_id
    JUMP INTI__LOOP

INTI__END:
; begin epilogue
  APOP
  RET
; end epilogue
; end func INT__INIT
