; ----------------------------- STACK OPERATIONS -----------------------------

; thread control block (7words)
; state@2b    =0 - process alive, 0xFFFF - process dead/not exist, >0 - ???
; ac@2b
; ps@2b
; ip@2b
; sp_origin@2b (SP that was before target is started - points to memory cell before first process own stack cell)
; stack_size@2b
; stack_data_ptr@2b

; Stack data descriptor (pointed by stack_data_ptr)
; (stack stored with top as first element)
; stack[SP]
; stack[SP+1]
; ...
; stack[SP+stack_size-1]


; _SYS__TCB_BEGIN: WORD 0x700
; _SYS__TCB_END: WORD 0x77F
; _PROC__TCB_DESCR_PTRS: WORD 0x700, 0x707, 0x70E ; 0x700-0x715, each struct 7 words, from 0x700
; _PROC__TCB_STACK_PTRS: WORD 0x715, 0x735, 0x755 ; 0x715-0x77F, each stack allocated with 32 words, from 0x715  

; begin globals
_PROC__TCB_DESCR_BEGIN: WORD 0x700
_PROC__TCB_STACK_BEGIN: WORD 0x715
_PROC__TCB_STACK_SIZE: WORD 0x20
; end globals


; func PROC_GET_NEXT_WITH_STATUS: (proc_id, status) get next after proc_id process from processes cycled list that have specific status 
; 
; params: AC: status
;         STACK: proc_id
; return: AC: proc_id or 0xFFFF if no such
; stack:
; &: ptr
; &: proc_id
; &: status
; &: ret_addr
; &: start_proc_id
; begin func
EXPORT PROC_GET_NEXT_WITH_STATUS:
; begin prologue
  APUSH
; end prologue

  ST &status

  LD &start_proc_id
  INC
  ST &proc_id

  PGNWS__LOOP:
    CMP $_SYS_PROC__PROCESSES_MAX
    BLO PGNWS__CONTINUE
    CLA
    ST &proc_id
  PGNWS__CONTINUE:
    FCALL ($PROC_GET_TCB_PTR_PTR)  
    ST &ptr
    LD (&ptr)
    CMP &status
    BEQ PGNWS__FOUND

    LD &proc_id
    CMP &start_proc_id
    BEQ PGNWS__INVALID ; if loop returned to beginning

    INC
    ST &proc_id

    JUMP PGNWS__LOOP

PGNWS__FOUND:
  LD &proc_id
  JUMP PGNWS__END

PGNWS__INVALID:
  LD #0xFF
PGNWS__END:
; begin epilogue
  APOP
  RET
; end epilogue
; end func PROC_GET_NEXT_WITH_STATUS



; func PROC_GET_TCB_PTR: (id) get TCB pointer for process with id 
; 
; params: AC: id
; return: AC: address of the TCB of process
EXPORT PROC_GET_TCB_PTR:
  PUSH
  LD #7
  CALL ($MUL_PTR)
  POP
  ADD _PROC__TCB_DESCR_BEGIN
  RET
; end func PROC_GET_TCB_PTR



; func PROC_GET_STACK_PTR: (id) get stack storage pointer for process with id 
; 
; params: AC: id
; return: AC: address of stack memory segment for process
PROC_GET_STACK_PTR:
  PUSH
  LD $_PROC__TCB_STACK_SIZE
  FCALL ($MUL) 
  POP
  ADD _PROC__TCB_STACK_BEGIN
  RET
; end func PROC_GET_STACK_PTR



; func PROC_SAVE_STATE: (process_id) saves state to TCB, moves stack and sets SP to the sp_origin (+this func ret addr)
; intended to called when stack have following structure:
;     (top)
;   - ret addr of PROC_SAVE_STATE
;   - ac of stopped thread
;   - ps 
;   - ip 
;     (here stack of thread begins)
; requires: must be called not from user process and not in EI-environment  
; affects: destroys SP and stack up to tcb.sp_origin
; convention: fastcall
; params: AC: process_id - process id which is going to be saved
; stack:
; &: tcb_ptr
; &: stack_origin
; &: stack_size
; &: ret_addr
; &: last_ac
; &: last_ps
; &: last_ip
; begin globals
PSS__RET: WORD ?
; end globals
; begin func
EXPORT PROC_SAVE_STATE:
  APUSH

  CALL PROC_GET_TCB_PTR

  INC ; skip id
  ST &tcb_ptr

  LD &last_ac
  ST (&tcb_ptr)+
  LD &last_ps
  ST (&tcb_ptr)+
  LD &last_ip
  ST (&tcb_ptr)+

  LD &ret_addr
  ST PSS__RET

  LD (&tcb_ptr)+ ; stack origin
  ST &stack_origin

  RSP
  ; update following number with (4 + $local variables count$)
  ADD #7 ; points to top of thread stack
  PUSH ; src

  ; calculate length
  SUB &stack_origin+1
  NEG 
  ST &stack_size+1
  ST (&tcb_ptr+1)+ ; save stack size

  LD (&tcb_ptr+1) ; stack_data_ptr
  PUSH ; dst
  
  LD -(&tcb_ptr+2) ; get stack size
  ; cnt
  FCALL ($MEMCPY_PTR) 

  POP
  POP
  
  LD &stack_origin
  WSP

; begin epilogue
  LD PSS__RET ; restore this function return address
  PUSH 
  ; warning: no pop/spadd/apop should be called as stack is cleared!
  RET
; end func PROC_SAVE_STATE




; func PROC_LOAD_STATE: (process_id) restores full process state from TCB. 
; After exit will jump into restored process!!!
; We down use memcpy as it would require it to be rewritten to be safe even with stack damaged what would slow it down.
; 
; requires: must be called not from user process and not in EI-environment  
; affects: AC, SP, IP, PS, stack data - all restored to values right before PROC_SAVE_STATE according to TCB data
; convention: fastcall
; params: AC: process_id - process id which should be loaded 
; stack: WARNING: use of stack (and APOP/APUSH) here is dangerous and prohibited as function alters SP and rewrites stack region
; begin globals
PLS__TCB_PTR: WORD ?
PLS__BASE_TCB_PTR: WORD ?
PLS__STACK_DATA_PTR: WORD ?
PLS__CNT: WORD ?
PLS__STACK_START_PTR: WORD ?
; end globals
; begin func
EXPORT PROC_LOAD_STATE:
  CALL PROC_GET_TCB_PTR

  ST PLS__BASE_TCB_PTR
  ADD #4 ; jump to tcb.sp_origin
  ST PLS__TCB_PTR 

  LD (PLS__TCB_PTR)+  
  SUB (PLS__TCB_PTR) 
  ST PLS__STACK_START_PTR ; tcb.sp_origin - tcb.stack_size
  
  LD (PLS__TCB_PTR)+ ; tcb.stack_size
  ST PLS__CNT

  LD (PLS__TCB_PTR)+ ; tcb.stack_data_ptr
  ST PLS__STACK_DATA_PTR

  LD PLS__STACK_START_PTR
  ST PLS__TCB_PTR ; reuse as pointer to real stack

  PLS__LOOP:
    LD (PLS__STACK_DATA_PTR)+
    ST (PLS__TCB_PTR)+
    LOOP PLS__CNT
    JUMP PLS__LOOP

  ; restore register states and do jump back to process 
  LD PLS__BASE_TCB_PTR
  INC ; move to tcb.ac
  ST PLS__TCB_PTR

  LD (PLS__TCB_PTR)+
  ST PLS__BASE_TCB_PTR ; reuse as stored AC

  LD PLS__STACK_START_PTR
  WSP ; reset SP to stored SP 

  LD (PLS__TCB_PTR)+ ; PS
  PUSH
  LD (PLS__TCB_PTR)+ ; IP
  SWAP
  PUSH   ; push ps and ip in reverse order

  IN 0 ; reset context switch timer

  LD PLS__BASE_TCB_PTR ; AC
  IRET

  ; no other RET/POP/APOP/SPADD should be done as this should be last function 
  ;   before control will be passed to restored process
; end func PROC_LOAD_STATE



