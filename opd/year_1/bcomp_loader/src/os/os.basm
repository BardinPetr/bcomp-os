; ----------------------------- OS -----------------------------


; func OS__INIT: OS start procedure
; 
; params:
; return: 
; stack:
; &: ret_addr
; begin globals
OSI__INIT_STR: WORD "Initializing..."
OSI__START_STR: WORD "System started"
OSI__END_STR: WORD "System halt"
; end globals
; begin func
OS__INIT:
; begin prologue
  APUSH
; end prologue

  CALL $PRINT_CLEAR

  LD OSI__INIT_STR_PTR
  CALL $PRINTLN

  ; prepare process manager
  CALL $PROCMEM__INIT
  CALL $PROC__INIT_MANAGER

  ; setup interrupts
  CALL $INT__INIT
  LD #1 ; 10Hz
  CALL $OS__SETUP_SWITCH_TIMER
  
  ; init end
  LD OSI__START_STR_PTR
  CALL $PRINTLN
  CALL $PRINT_ENDL

  CALL $SHELL_MAIN

  LD OSI__END_STR_PTR
  CALL $PRINTLN
  
; begin epilogue
  APOP
  RET
; end epilogue
; end func OS__INIT



PROC1_PTR: WORD $PROC1
PROC1_STR: WORD "proc"
PROC1:
  LD PROC1_STR_PTR
  CALL $PRINTLN  
  JUMP PROC1

PROC2_PTR: WORD $PROC2
PROC2_STR: WORD "PROC"
PROC2:
  LD PROC2_STR_PTR
  CALL $PRINTLN  
  JUMP PROC2


; func OS__CONTEXT_SWITCH_INT: () interrupt to swtich current execution context.
; Stores current process state to TCB and restores next process state then jumps to it
; Should be called with timer
; 
; begin globals
OS__CONTEXT_SWITCH_INT_PTR: WORD $OS__CONTEXT_SWITCH_INT
OS__CSI__TEXT: WORD "switch"
; end globals
; begin func
OS__CONTEXT_SWITCH_INT:
  ; here is PS on stack top an IP the next
  PUSH ; cur accumulator value

  LD OS__CSI__TEXT_PTR
  CALL $PRINTLN

  LD $_SYS_PROC__RUNNING_PROCESS_ID  
  CALL $PROC_SAVE_STATE
  
  ; search for active process
  LD $_SYS_PROC__RUNNING_PROCESS_ID
  PUSH 
  LD #0
  CALL $PROC_GET_NEXT_WITH_STATUS
  SWAP
  POP

  ST $_SYS_PROC__RUNNING_PROCESS_ID
  CALL $PROC_LOAD_STATE

  ; this instruction should not be reached in normal process loading
  IRET
; end func OS__CONTEXT_SWITCH_INT



; func OS__SETUP_SWITCH_TIMER: (period)
; 
; params: AC: period (real period = period * 100ms)
; stack:
; &: period
; &: ret_addr
; begin func
OS__SETUP_SWITCH_TIMER:
; begin prologue
  APUSH
; end prologue

  ST &period

  LD $OS__CONTEXT_SWITCH_INT_PTR
  CALL $INT__REGISTER_HANDLER

  PUSH
  CLA ; timer DEV#0
  CALL $DEV__INT_ON
  POP
  
  CLA ; DEV#0 DR = 0
  PUSH
  LD &period+1
  CALL $DEV__OUT
  POP

  ; EI

; begin epilogue
  APOP
  RET
; end epilogue
; end func OS__SETUP_SWITCH_TIMER

