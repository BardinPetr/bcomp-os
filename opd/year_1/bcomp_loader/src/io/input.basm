; ----------------------------- TERMINAL INPUT -----------------------------
; func READ_LINE: (dst: word) read text string from keyboard untill enter pressed(LF):
; 
; requires: free memory of string starting from addr in param
;
; params:  AC: dst: address in memory from which the result will be placed;
; return:  AC: string length
;          MEM: string starting at mem addr "dst"
; affects: AC
; stack:   
; &: cur_id
; &: ptr
; &: ret_addr
; begin globals:
RL__PROMPT: WORD "> "
; end globals
; begin func
READ_LINE:
; begin prologue
  APUSH 
; end prologue

  ; set base output address from AC
  ST &ptr

  ; set character id to zero 
  CLA
  ST &cur_id

  ; LD RL__PROMPT_PTR
  ; CALL $PRINT

  ; begin loop
  RL__LOOP: 
    LD &cur_id
    INC 
    ST &cur_id

    ; begin if
    AND #1
    BZS RL__HIGH_BYTE
    ; begin branch char_id % 2 == 0
    RL__LOW_BYTE:
      CALL $READ_CHAR
      CALL $PRINT_CHAR

      CMP #0x0A ; LF (NUL is full next word)
      BEQ RL__EOL_APPEND_NUL
      CMP #0x0D ; CR
      BEQ RL__EOL_APPEND_NUL
      CMP #0x08 ; BS
      BNE RL__CONTINUE_L
      ; begin branch on backspace pressed
        LD -(&ptr)
        JUMP RL__HIGH_BYTE

      RL__CONTINUE_L:
      ST (&ptr)
      JUMP RL__LOOP
    ; begin branch char_id % 2 == 1
    RL__HIGH_BYTE:
      CALL $READ_CHAR
      CALL $PRINT_CHAR

      CMP #0x0A ; LF, NUL is this word high byte
      ; no need to set NUL as it is automatically set when writing low byte
      BEQ RL__EOL
      CMP #0x0D ; CR
      BEQ RL__EOL
      CMP #0x08 ; BS
      BNE RL__CONTINUE_H
      ; begin branch on backspace pressed
        CLA
        ST (&ptr)
        JUMP RL__LOW_BYTE

      RL__CONTINUE_H:
      SWAB
      OR (&ptr)
      ST (&ptr)+
      JUMP RL__LOOP
    ; end if
  ; end loop

RL__EOL_APPEND_NUL:
  CLA ; put EOS
  ST (&ptr)
RL__EOL:
  CALL $PRINT_ENDL
  
  ; begin epilogue
  LD &cur_id
  APOP 
  RET
  ; end epilogue
; end func READ_LINE


; func READ_CHAR: pool keyboard for ready and read 1 char from it
; 0x19,0x18 for keyboard; 0xA,0x8 for serial port
; 
; params: none
; return: AC: data read from dev in low byte
; affects: AC higher byte is cleared
; begin func
READ_CHAR:
RCH__LOOP:
  CLA
  ; IN 0x19
  IN 0xA
  AND #0x40
  BZS RCH__LOOP
  ; IN 0x18
  IN 0x8
  RET
; end func READ_CHAR